<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="messageBoxDefaultInstallmentType.Text" xml:space="preserve">
    <value>Select an installment type...</value>
  </data>
  <data name="messageBoxDefaultExoticProduct.Text" xml:space="preserve">
    <value>Select an exotic schedule...</value>
  </data>
  <data name="deleteInstallment.Text" xml:space="preserve">
    <value>You must select an installment before deleting</value>
  </data>
  <data name="messageBoxAskIfWantToSave.Text" xml:space="preserve">
    <value>Do you really want to save this product ?</value>
  </data>
  <data name="messageBoxPackageSaved.Text" xml:space="preserve">
    <value>Product saved</value>
  </data>
  <data name="messageBoxRecapIntro.Text" xml:space="preserve">
    <value>With these installments the client will repay:</value>
  </data>
  <data name="messageBoxRecapPrincipal.Text" xml:space="preserve">
    <value>% of principal</value>
  </data>
  <data name="messageBoxRecapInterest.Text" xml:space="preserve">
    <value>% of total interests</value>
  </data>
  <data name="messageBoxSave.Text" xml:space="preserve">
    <value>Do you want update contracts related to this package ?</value>
  </data>
  <data name="title.Text" xml:space="preserve">
    <value>Package form</value>
  </data>
  <data name="messageUpdate.Text" xml:space="preserve">
    <value>Do you want to update active loans attached to this loan product ?</value>
  </data>
  <data name="messageAmountCycle.Text" xml:space="preserve">
    <value>Amount Cycle properties</value>
  </data>
  <data name="messageExoticInstallment.Text" xml:space="preserve">
    <value>Exotic Installment properties</value>
  </data>
  <data name="messageSelectAmountCycles.Text" xml:space="preserve">
    <value>Select an Amount Cycles... </value>
  </data>
  <data name="messageSelectExotic.Text" xml:space="preserve">
    <value>Select an Exotic product... </value>
  </data>
  <data name="Fundingline.Text" xml:space="preserve">
    <value>Funding line...</value>
  </data>
  <data name="Currency.Text" xml:space="preserve">
    <value>Select currency...</value>
  </data>
  <data name="FormAddProductCaption.Text" xml:space="preserve">
    <value>Add Loan Product</value>
  </data>
  <data name="FormEditProductCaption.Text" xml:space="preserve">
    <value>Edit Loan Product</value>
  </data>
  <data name="Yearly.Text" xml:space="preserve">
    <value>yearly</value>
  </data>
  <data name="exoticInstallmentProperties.Text" xml:space="preserve">
    <value>Exotic installment N?{0}'s properties</value>
  </data>
  <data name="NumberOfEntry" xml:space="preserve">
    <value>Item #</value>
  </data>
  <data name="Interestrate.Text" xml:space="preserve">
    <value>Interest rate</value>
  </data>
  <data name="Loanamount.Text" xml:space="preserve">
    <value>Loan amount</value>
  </data>
  <data name="Numberofinstallments.Text" xml:space="preserve">
    <value>Number of installments</value>
  </data>
  <data name="DeleteEntryFeeCycle.Text" xml:space="preserve">
    <value>Are you sure you want to delete current entry fee cycle?</value>
  </data>
  <data name="AddEntryFeeCycle.Text" xml:space="preserve">
    <value>The cycle will be put into the database without saving of the product. Are you sure you want to add the cycle?</value>
  </data>
  <data name="EntryFeeCycleName.Text" xml:space="preserve">
    <value>From {0} to {1}</value>
  </data>
  <data name="ConfirmDeletingEntryFeeCycle.Text" xml:space="preserve">
    <value>Are you sure you want to delete selected loan cycle?</value>
  </data>
  <data name="AddEntryFeeCycleError.Text" xml:space="preserve">
    <value>The cycle you have input already exists.</value>
  </data>
  <data name="grBoxIntRatePer.Text" xml:space="preserve">
    <value>Annual interest rate %*</value>
  </data>
  <data name="grBoxIntRateYear.Text" xml:space="preserve">
    <value>Annual interest rate %*</value>
  </data>
  <data name="OnlyIntegerIsAccepted.Text" xml:space="preserve">
    <value>The compulsory amount must be integer, not real</value>
  </data>
  <data name="Actual360.Text" xml:space="preserve">
    <value>Actual/360</value>
  </data>
  <data name="ActualActual.Text" xml:space="preserve">
    <value>Actual/Actual</value>
  </data>
  <data name="Thirty360.Text" xml:space="preserve">
    <value>30/360</value>
  </data>
  <data name="ThirtyActual.Text" xml:space="preserve">
    <value>30/Actual</value>
  </data>
  <data name="DecliningFixedInstallments.Text" xml:space="preserve">
    <value>Declining - Equal monthly installments</value>
  </data>
  <data name="DecliningFixedPrincipal.Text" xml:space="preserve">
    <value>Declining - Fixed principal</value>
  </data>
  <data name="DecliningReal.Text" xml:space="preserve">
    <value>Declining - Fixed principal with effective interest rate</value>
  </data>
  <data name="Flat.Text" xml:space="preserve">
    <value>Flat (fixed principal, fixed interest)</value>
  </data>
  <data name="allInstallmentTypes" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="allScheduleTypes" xml:space="preserve">
    <value>All</value>
  </data>
</root>