<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdditionalColumns.Text" xml:space="preserve">
    <value>AdditionalColumns</value>
  </data>
  <data name="Backup.Text" xml:space="preserve">
    <value>Backup</value>
  </data>
  <data name="BackupCancelled.Text" xml:space="preserve">
    <value>Backup database canceled</value>
  </data>
  <data name="BackUpDatabase.Text" xml:space="preserve">
    <value>Backup database</value>
  </data>
  <data name="BackupFailed.Text" xml:space="preserve">
    <value>Backup failed!</value>
  </data>
  <data name="BranchCode.Text" xml:space="preserve">
    <value>Branch Code</value>
  </data>
  <data name="ConnectionWasNotMade.Text" xml:space="preserve">
    <value>A connection to SQL Server could not be made! Are you sure you have correctly filled the fields?</value>
  </data>
  <data name="CorrectLabels.Text" xml:space="preserve">
    <value>Please, check and correct all the red labels!</value>
  </data>
  <data name="Created.Text" xml:space="preserve">
    <value>has been successfully created</value>
  </data>
  <data name="CreationFailed.Text" xml:space="preserve">
    <value>Database creation failed!</value>
  </data>
  <data name="Database.Text" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="DatabaseCreation.Text" xml:space="preserve">
    <value>Database creation is in progress...</value>
  </data>
  <data name="DatabaseCreationCancelled.Text" xml:space="preserve">
    <value>Database creation canceled</value>
  </data>
  <data name="Databases.Text" xml:space="preserve">
    <value>Databases</value>
  </data>
  <data name="DefaultDatabase.Text" xml:space="preserve">
    <value>is now the default database</value>
  </data>
  <data name="InProgress.Text" xml:space="preserve">
    <value>is in progress...</value>
  </data>
  <data name="Login.Text" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="MissingColumns.Text" xml:space="preserve">
    <value>Missing columns</value>
  </data>
  <data name="Password.Text" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="RestoreCancelled.Text" xml:space="preserve">
    <value>Restore database canceled</value>
  </data>
  <data name="RestoreDatabase.Text" xml:space="preserve">
    <value>Restore database</value>
  </data>
  <data name="RestoreFailed.Text" xml:space="preserve">
    <value>Restore failed!</value>
  </data>
  <data name="SelectDatabase.Text" xml:space="preserve">
    <value>Select a database in the list above</value>
  </data>
  <data name="SelectInList.Text" xml:space="preserve">
    <value>Select a database in the list above</value>
  </data>
  <data name="Server.Text" xml:space="preserve">
    <value>Server</value>
  </data>
  <data name="Size.Text" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="StructureConforms.Text" xml:space="preserve">
    <value>Structure conform to the software's version</value>
  </data>
  <data name="Successful.Text" xml:space="preserve">
    <value>successful</value>
  </data>
  <data name="To.Text" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="UpdateDBFrom.Text" xml:space="preserve">
    <value>Updating database from</value>
  </data>
  <data name="UpdatingDatabase.Text" xml:space="preserve">
    <value>Database is being upgraded, please wait until completion</value>
  </data>
  <data name="Upgrade.Text" xml:space="preserve">
    <value>Upgrade</value>
  </data>
  <data name="UpgradeDatabase.Text" xml:space="preserve">
    <value>Upgrade Database</value>
  </data>
  <data name="UpgradeDatabaseInProgress.Text" xml:space="preserve">
    <value>Upgrade database in progress...</value>
  </data>
  <data name="UpgradeFailed.Text" xml:space="preserve">
    <value>Upgrade failed!</value>
  </data>
  <data name="UpgradeYourDatabase.Text" xml:space="preserve">
    <value>Please ugrade your database to the current version!</value>
  </data>
  <data name="Version.Text" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="FileException.Text" xml:space="preserve">
    <value>Please check database files</value>
  </data>
  <data name="FileBackedUp.Text" xml:space="preserve">
    <value>File {0} has been created</value>
  </data>
  <data name="NoSelectBase.Text" xml:space="preserve">
    <value>First, set the default database!</value>
  </data>
</root>